{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tung Ngo\\\\translator\\\\src\\\\Result.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Result = _ref => {\n  let {\n    word,\n    phonetics,\n    meanings,\n    setText\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"word\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 13\n      }, this), phonetics.map((phonetic, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", phonetic.text, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","Result","word","phonetics","meanings","setText","map","phonetic","index","text"],"sources":["C:/Users/Tung Ngo/translator/src/Result.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Result = ({word, phonetics, meanings, setText}) => {\r\n  return (\r\n    <ul>\r\n        <li className='word'>\r\n            <h2>\r\n                {word}\r\n            </h2>\r\n\r\n            {\r\n                phonetics.map((phonetic, index) => (\r\n                    <span key={index}> {phonetic.text} </span>\r\n                ))\r\n            }\r\n        </li>\r\n\r\n        {/* {\r\n            meanings.map((meaning, index) => (\r\n                <li className='contain'>\r\n                    <h3>noun</h3>\r\n\r\n                    <div className='details meaning'>\r\n                        <h3>Meaning</h3>\r\n                        {\r\n                            meaning.definitions.map((definition, index) => (\r\n                                <p key={index}> -{definition.definition}</p>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    <div className='details synonyms'>\r\n                        <h3>Synonyms</h3>\r\n                        <span>Giai thich</span>\r\n                    </div>\r\n                </li>\r\n            ))\r\n        } */}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Result"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAM,GAAG,QAA0C;EAAA,IAAzC;IAACC,IAAD;IAAOC,SAAP;IAAkBC,QAAlB;IAA4BC;EAA5B,CAAyC;EACvD,oBACE;IAAA,uBACI;MAAI,SAAS,EAAC,MAAd;MAAA,wBACI;QAAA,UACKH;MADL;QAAA;QAAA;QAAA;MAAA,QADJ,EAMQC,SAAS,CAACG,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,kBACV;QAAA,gBAAoBD,QAAQ,CAACE,IAA7B;MAAA,GAAWD,KAAX;QAAA;QAAA;QAAA;MAAA,QADJ,CANR;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADF;AAqCD,CAtCD;;KAAMP,M;AAwCN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}