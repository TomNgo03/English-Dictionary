{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tung Ngo\\\\translator\\\\src\\\\Result.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Result = _ref => {\n  let {\n    word,\n    phonetics,\n    meanings,\n    setText\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"word\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 13\n      }, this), phonetics.map((phonetic, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", phonetic.text, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this), meanings.map((meaning, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"contain\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"noun\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details meaning\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Meaning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this), meaning.definitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"- \", definition.definition]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this), meaning.synonyms.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details synonyms\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Synonyms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this), meaning.synonyms.map((synonym, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [synonym, \", \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 37\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","Result","word","phonetics","meanings","setText","map","phonetic","index","text","meaning","definitions","definition","synonyms","length","synonym"],"sources":["C:/Users/Tung Ngo/translator/src/Result.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Result = ({word, phonetics, meanings, setText}) => {\r\n  return (\r\n    <ul>\r\n        <li className='word'>\r\n            <h2>\r\n                {word}\r\n            </h2>\r\n\r\n            {\r\n                phonetics.map((phonetic, index) => (\r\n                    <span key={index}> {phonetic.text} </span>\r\n                ))\r\n            }\r\n        </li>\r\n\r\n        {\r\n            meanings.map((meaning, index) => (\r\n                <li className='contain'>\r\n                    <h3>noun</h3>\r\n\r\n                    <div className='details meaning'>\r\n                        <h3>Meaning</h3>\r\n                        {\r\n                            meaning.definitions.map((definition, index) => (\r\n                                <p key={index}>- {definition.definition}</p>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    {\r\n                        meaning.synonyms.length !== 0 && \r\n                        <div className='details synonyms'>\r\n                            <h3>Synonyms</h3>\r\n                            {\r\n                                meaning.synonyms.map((synonym, index) => (\r\n                                    <span key={index}>{synonym}, </span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    }\r\n\r\n                </li>\r\n            ))\r\n        }\r\n\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Result"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAM,GAAG,QAA0C;EAAA,IAAzC;IAACC,IAAD;IAAOC,SAAP;IAAkBC,QAAlB;IAA4BC;EAA5B,CAAyC;EACvD,oBACE;IAAA,wBACI;MAAI,SAAS,EAAC,MAAd;MAAA,wBACI;QAAA,UACKH;MADL;QAAA;QAAA;QAAA;MAAA,QADJ,EAMQC,SAAS,CAACG,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,kBACV;QAAA,gBAAoBD,QAAQ,CAACE,IAA7B;MAAA,GAAWD,KAAX;QAAA;QAAA;QAAA;MAAA,QADJ,CANR;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAcQJ,QAAQ,CAACE,GAAT,CAAa,CAACI,OAAD,EAAUF,KAAV,kBACT;MAAI,SAAS,EAAC,SAAd;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAGI;QAAK,SAAS,EAAC,iBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,EAGQE,OAAO,CAACC,WAAR,CAAoBL,GAApB,CAAwB,CAACM,UAAD,EAAaJ,KAAb,kBACpB;UAAA,iBAAkBI,UAAU,CAACA,UAA7B;QAAA,GAAQJ,KAAR;UAAA;UAAA;UAAA;QAAA,QADJ,CAHR;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,EAaQE,OAAO,CAACG,QAAR,CAAiBC,MAAjB,KAA4B,CAA5B,iBACA;QAAK,SAAS,EAAC,kBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,EAGQJ,OAAO,CAACG,QAAR,CAAiBP,GAAjB,CAAqB,CAACS,OAAD,EAAUP,KAAV,kBACjB;UAAA,WAAmBO,OAAnB;QAAA,GAAWP,KAAX;UAAA;UAAA;UAAA;QAAA,QADJ,CAHR;MAAA;QAAA;QAAA;QAAA;MAAA,QAdR;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,CAdR;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8CD,CA/CD;;KAAMP,M;AAiDN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}